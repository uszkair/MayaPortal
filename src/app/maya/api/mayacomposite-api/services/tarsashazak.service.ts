/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApartmentResponse } from '../models/apartment-response';
import { createApartment } from '../fn/tarsashazak/create-apartment';
import { CreateApartment$Params } from '../fn/tarsashazak/create-apartment';
import { getAllApartments } from '../fn/tarsashazak/get-all-apartments';
import { GetAllApartments$Params } from '../fn/tarsashazak/get-all-apartments';
import { getApartmentById } from '../fn/tarsashazak/get-apartment-by-id';
import { GetApartmentById$Params } from '../fn/tarsashazak/get-apartment-by-id';
import { PageApartmentListResponse } from '../models/page-apartment-list-response';


/**
 * Társasházak kezelésére szolgáló végpontok
 */
@Injectable({ providedIn: 'root' })
export class TarsashazakService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createApartment()` */
  static readonly CreateApartmentPath = '/apartment/save';

  /**
   * Új társasház létrehozása.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createApartment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createApartment$Response(params: CreateApartment$Params, context?: HttpContext): Observable<StrictHttpResponse<ApartmentResponse>> {
    return createApartment(this.http, this.rootUrl, params, context);
  }

  /**
   * Új társasház létrehozása.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createApartment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createApartment(params: CreateApartment$Params, context?: HttpContext): Observable<ApartmentResponse> {
    return this.createApartment$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApartmentResponse>): ApartmentResponse => r.body)
    );
  }

  /** Path part for operation `getApartmentById()` */
  static readonly GetApartmentByIdPath = '/apartment/{id}';

  /**
   * Társasház lekérése azonosító alapján.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getApartmentById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApartmentById$Response(params: GetApartmentById$Params, context?: HttpContext): Observable<StrictHttpResponse<ApartmentResponse>> {
    return getApartmentById(this.http, this.rootUrl, params, context);
  }

  /**
   * Társasház lekérése azonosító alapján.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getApartmentById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getApartmentById(params: GetApartmentById$Params, context?: HttpContext): Observable<ApartmentResponse> {
    return this.getApartmentById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApartmentResponse>): ApartmentResponse => r.body)
    );
  }

  /** Path part for operation `getAllApartments()` */
  static readonly GetAllApartmentsPath = '/apartment/list';

  /**
   * Get all apartments with filtering and pagination.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllApartments()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllApartments$Response(params: GetAllApartments$Params, context?: HttpContext): Observable<StrictHttpResponse<PageApartmentListResponse>> {
    return getAllApartments(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all apartments with filtering and pagination.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllApartments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllApartments(params: GetAllApartments$Params, context?: HttpContext): Observable<PageApartmentListResponse> {
    return this.getAllApartments$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageApartmentListResponse>): PageApartmentListResponse => r.body)
    );
  }

}
